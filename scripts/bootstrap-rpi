#!/bin/sh
set -e

_vecho() {
  echo >&2 $@
}

_die() {
  echo >&2 $@
  exit 1
}

_has() {
  command -v "${1}" > /dev/null
}

check_dep() {
  _has "${1}" || _die "${1} not found, try \`apk add ${2:-${1}}\`"
}

_fetch() {
  local flag=
  [ -f "${1}" ] && flag="--time-cond '${1}'"
  _vecho "Downloading ${1}"
  curl ${flag} --progress-bar --output "${1}" "${2}"
}

_find_tgz() {
  curl -Ls "${base_url}" \
    | grep -oE 'href="([^"#]+)"' \
    | sed -n 's/^href="\([^"]*\)".*/\1/p' \
    | grep -Ex '^alpine-rpi-.*\.tar\.gz$' \
    | sort -rV \
    | head -n 1
}

ovl_mkdirp() {
  mkdir -p "${ovl}/${1}"
}

ovl_file() {
  mkdir -p "${ovl}/$(dirname "${1}")"
  cat > "${ovl}/${1}"
}

ovl_file_append() {
  mkdir -p "${ovl}/$(dirname "${1}")"
  cat >> "${ovl}/${1}"
}

ovl_rc_add() {
  local service="${1}"
  local runlevel="${ovl}/etc/runlevels/${2:-default}"
  mkdir -p "${runlevel}"
  ln -s "/etc/init.d/${service}" "${runlevel}/${service}"
}

ovl_apk_add() {
  _vecho "Adding ${1} to world"
  echo "${1}" | ovl_file_append etc/apk/world
}

ovl_service() {
  _vecho "Creating ${1} service" 
  local initd="etc/init.d"
  cat | ovl_file "${initd}/${1}"
  chmod +x "${ovl}/${initd}/${1}"
  ovl_rc_add "${1}" default
}

ovl_service_config() {
  _vecho "Configuring ${1}"
  cat | ovl_file_append "etc/conf.d/${1}"
}

ovl_ansible() {

  ovl_apk_add python3

  curl https://github.com/juliekoubova.keys -o - \
    | ovl_file home/ansible/.ssh/authorized_keys

  ovl_service bootstrap-ansible <<'EOF'
#!/sbin/openrc-run

_chown_r() {
  ebegin "Changing ownership: ${2}"
  chown -R "${1}" "${2}"
  eend $?
}

_chmod() {
  [ -e "${2}" ] || return
  ebegin "Changing permissions: ${2}"
  chmod "${1}" "${2}"
  eend $?
}

start() {
  rm -f /etc/runlevels/*/$RC_SVCNAME

  local group=wheel
  local user=ansible
  local user_id=2000
  local user_home="/home/${user}"

  ebegin "Adding user ${user}"
  adduser -D -G "${group}" -h "${user_home}" -u "${user_id}" "${user}" \
    && echo "${user}:*" | chpasswd -e
  eend $?

  _chown_r    "${user}:${group}" "${user_home}"
  _chmod 0700 "${user_home}/.ssh"
  _chmod 0644 "${user_home}/.ssh/authorized_keys"
}
EOF
}

ovl_sys_install() {

  ovl_apk_add e2fsprogs

  local service=build-alpine-rpi-sys-install 
  ovl_service_config $service <<EOF
boot_device="${RPI_BOOT_PART}"
root_device="${RPI_ROOT_PART}"
EOF

  ovl_service $service <<'EOF'
#!/sbin/openrc-run

depend() {
  need net chronyd firstboot
}

start() {
  rm -f /etc/runlevels/*/$RC_SVCNAME

  ebegin "Mounting ${root_device}"
  mount -t ext4 "/dev/${root_device}" /mnt || eend $? || return 1
  eend $?

  ebegin "Adding /home to LBU"
  lbu add /home || eend $? || return 1
  eend $?

  ebegin "Installing Alpine to ${root_device}"
  FORCE_BOOTFS=1 setup-disk -m sys -s 0 /mnt || eend $? || return 1
  eend $?

  ebegin "Re-mounting ${boot_device} as read-write"
  mount -o remount,rw "/media/${boot_device}" || eend $? || return 1
  eend $?

  ebegin "Clearing ${boot_device}"
  rm -rf /media/${boot_device}/* || eend $? || return 1
  eend $?

  ebegin "Moving boot files to ${boot_device}"
  cd /mnt || eend $? || return 1
  rm boot/boot || eend $? || return 1
  mv boot/* /media/${boot_device} || return 1
  eend $? 

  ebegin "Adding ${boot_device} to fstab"
  echo "/dev/${boot_device} /boot vfat defaults 0 0" >> etc/fstab
  eend $?

  reboot
}
EOF
}

ovl_doas() {
  ovl_apk_add doas
  ovl_file etc/doas.d/doas.conf <<EOF
permit persist :wheel
permit nopass ansible
EOF
}

ovl_wpa_supplicant() {
  ovl_apk_add wpa_supplicant
  ovl_rc_add wpa_supplicant boot

  _vecho "Setting wlan country to ${RPI_WIFI_COUNTRY}"
  echo "country=${RPI_WIFI_COUNTRY}" \
    | ovl_file etc/wpa_supplicant/wpa_supplicant.conf

  _vecho "Setting wlan ssid and psk"
  wpa_passphrase "${RPI_WIFI_SSID}" "${RPI_WIFI_PSK}" \
    | ovl_file_append etc/wpa_supplicant/wpa_supplicant.conf

  _vecho "Configuring DHCP on wlan0"
  ovl_file_append etc/network/interfaces <<EOF
auto wlan0
iface wlan0 inet dhcp
iface wlan0 inet6 auto
EOF
}

ovl_networking() {
  ovl_rc_add networking boot

  _vecho "Configuring hostname ${RPI_HOSTNAME}"
  echo "${RPI_HOSTNAME}" | ovl_file etc/hostname

  ovl_file etc/network/interfaces <<EOF
auto lo
iface lo inet loopback
EOF

  [ -n "${RPI_WIFI_SSID}" ] && ovl_wpa_supplicant

  if [ -n "${RPI_ETHERNET}" ]; then
    _vecho "Configuring DHCP on ${RPI_ETHERNET}"
    ovl_file_append etc/network/interfaces <<EOF
auto ${RPI_ETHERNET}
iface ${RPI_ETHERNET} inet dhcp
iface ${RPI_ETHERNET} inet6 auto
EOF
  fi
}

ovl_openssh() {
  ovl_apk_add openssh
  ovl_rc_add sshd default
  ovl_file etc/sshd/sshd_config <<EOF
AuthorizedKeysFile     .ssh/authorized_keys
PasswordAuthentication no
PermitRootLogin        no
EOF

}

ovl_lbuconf() {
  _vecho "Configuring lbu"
  echo "LBU_MEDIA=${RPI_BOOT_PART}" | ovl_file etc/lbu/lbu.conf
}

ovl_apk_repos() {
  _vecho "Configuring APK repositories ${RPI_APK_REPOS}"
  ovl_file etc/apk/repositories <<EOF
${RPI_ALPINE_MIRROR}/${fixed_rel}/main
${RPI_ALPINE_MIRROR}/${fixed_rel}/community
/media/${RPI_BOOT_PART}/apks
EOF
}

make_ovl() {
  if [ -e "${ovl}" ]; then
    _vecho "Deleting ${ovl}"
    rm -rf "${ovl}"
  fi

  _vecho "Configuring default boot services"
  ovl_mkdirp etc
  touch "${ovl}/etc/.default_boot_services"

  ovl_apk_add chrony

  ovl_rc_add seedrng boot
  ovl_rc_add swclock boot
  ovl_rc_add sysctl boot

  ovl_rc_add acpid default
  ovl_rc_add chronyd default
  ovl_rc_add crond default

  ovl_apk_repos
  ovl_doas
  ovl_lbuconf
  ovl_networking
  ovl_openssh
  ovl_ansible 

  [ -n "${RPI_SYS_INSTALL}" ] && ovl_sys_install || true
}

make_partition() {
  local type="${1}" part="${2}" mnt="${3}"
  shift 3

  _vecho "Formatting ${part} with ${type}"
  mkfs.${type} "$@" "${part}"

  _vecho "Mounting ${part} on ${mnt}"
  mkdir -p "${mnt}"
  mount -t "${type}" "${part}" "${mnt}"
}

usage() {
  cat >&2 << EOF
  usage: bootstrap-rpi -c CONFIG -d DEVICE [-s]
         bootstrap-rpi -c CONFIG -o [-s]
         bootstrap-rpi [-h]

  Install Alpine for a Raspberry Pi on an SD card.

  options:
   -c  Use the specified configs (can be passed multiple times)
   -d  The SD card device
   -h  Show this help
   -o  Only create the .apkovl file
   -s  System disk mode installation

EOF
  exit $1
}

while getopts "c:d:hos" opt; do
  case $opt in
    c) conf="${conf}${OPTARG} ";;
    d) disk="${OPTARG}";;
    h) usage 0;;
    o) RPI_OVL_ONLY=1;;
    s) RPI_SYS_INSTALL=1;;
    '?') _usage 1;;
  esac
done
shift $(($OPTIND - 1))

[ -n "${conf}" ] || _usage 1

check_dep sfdisk 
check_dep mkfs.vfat dosfstools
check_dep mkfs.ext4 e2fsprogs

for c in ${conf}; do
  [ -r "${c}" ] || _die "conf ${c} not readable"
  . "${c}"
done

if [ -n "${RPI_WIFI_SSID}${RPI_WIFI_PSK}" ]; then
  [ -n "${RPI_WIFI_COUNTRY}" ] || _die "RPI_WIFI_COUNTRY must be set"
  [ -n "${RPI_WIFI_SSID}" ] || _die "RPI_WIFI_SSID must be set"
  [ -n "${RPI_WIFI_PSK}" ] || _die "RPI_WIFI_PSK must be set"
  check_dep wpa_passphrase wpa_supplicant
fi

: ${XDG_STATE_HOME:=${HOME}/.local/state}

: ${RPI_ARCH:=aarch64}
: ${RPI_ALPINE_REL:=latest-stable}
: ${RPI_ALPINE_MIRROR:=https://dl-cdn.alpinelinux.org/alpine}
: ${RPI_WORKDIR:=${XDG_STATE_HOME}/build-alpine-rpi}
: ${RPI_HOSTNAME:=alpineberry}
: ${RPI_DISK:=mmcblk0}
: ${RPI_BOOT_PART:=${RPI_DISK}p1}
: ${RPI_ROOT_PART:=${RPI_DISK}p2}
: ${RPI_OVL_ONLY:=}
: ${RPI_SYS_INSTALL:=}
: ${RPI_ETHERNET:=}

base_url="${RPI_ALPINE_MIRROR}/${RPI_ALPINE_REL}/releases/${RPI_ARCH}"
boot_part="${disk}1"
root_part="${disk}2"
boot_mnt="${RPI_WORKDIR}/boot"
root_mnt="${RPI_WORKDIR}/root"
ovl="${RPI_WORKDIR}/ovl"

_vecho "Searching for latest rpi .tar.gz of ${RPI_ALPINE_REL} ${RPI_ARCH}"
tgz=`_find_tgz`
sha="${tgz}.sha256"
fixed_rel="v$(echo "${tgz}" | sed 's/alpine-rpi-\([0-9]\+\.[0-9]\+\).*/\1/')"

make_ovl

[ -n "${RPI_OVL_ONLY}" ] && exit 0

[ `id -u` -eq 0 ] || _die "must be root"
[ -n "${disk}" ] || _usage 1

_fetch "${RPI_WORKDIR}/${sha}" "${base_url}/${sha}"
_fetch "${RPI_WORKDIR}/${tgz}" "${base_url}/${tgz}"

_vecho "Verifying checksums"
(cd -- "${RPI_WORKDIR}" && sha256sum -cs "${RPI_WORKDIR}/${sha}") || _die "sha256sum doesn't match"

mounts=`cat /proc/mounts | grep -E "^${disk}" | cut -d' ' -f2`
_vecho "Umnounting ${mounts}"
[ -n "${mounts}" ] && echo $mounts | xargs umount

_vecho "Creating MBR partition table on ${disk}"
sfdisk --quiet "${disk}" <<EOF
label: dos
name=boot,   type=c,  size=256M,  bootable
name=alpine, type=83
EOF

make_partition vfat "${boot_part}" "${boot_mnt}" -F32
make_partition ext4 "${root_part}" "${root_mnt}" -F -q -O ^has_journal

_vecho "Extracting ${tgz}"
tar xz -o --no-same-permissions \
  -f "${RPI_WORKDIR}/${tgz}" \
  -C "${boot_mnt}" 

_vecho "Writing apkovl.tar.gz"
tar cz -f "${boot_mnt}/build-rpi.apkovl.tar.gz" -C "${ovl}" .

_vecho "Unmounting ${boot_part}"
umount "${boot_part}"

_vecho "Unmounting ${root_part}"
umount "${root_part}"
